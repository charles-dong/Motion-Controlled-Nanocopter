/*
	Author: Jamie Mitchell

	Functions: jamieOnFrame
*/


#include <cflie/CCrazyflie.h>
#include <stdio.h>
#include <unistd.h>
#include "../leap/leap_c.h"
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <netinet/in.h>
#include <pthread.h>
#include "studentHeader.h"
#include "jamieControl.h"

#define MAX_COUNT 2

#define SWIPE_VELOCITY_THRESHOLD 3000
#define MINIMUM_VELOCITY_THRESHOLD 40
#define PITCH_THRESHOLD .45
#define ROLL_THRESHOLD .45


/*
 
 *jamieOnFrame*
 ------------
 
 Description: Reads data from the Leap frame and hand objects. Determines which gestures are made,
	updates current_roll/pitch/thrust, and updates the current_signal.
 
 Input: hand object,frame object, current thrust pointer, current pitch pointer, current roll poiner, current_signal
 
 Return: N/A
 
 ** Pseudo Code **
 
 (1) Get values for the palm position, direction, velocity, normal vector, number of fingers, number of hands
 (2) Determine if values reach threshold for
	- Pitch: Hand tilted forward/backward more than 45 degrees
	- Roll: Hand tilted left/right more than 45 degrees
	- Thrust: Hand raised 2-3ft above leap motion (increase), hand 3 inches or less above leap (decrease)
	- Fly gesture: Two hands. 5 fingers out on each. Stationary hands.
	- Land gesture: Two hands. 0 fingers out on each (fist). Stationary hands.
	- Change hover: Quick swipe motion from right to left. 
 (3) Update the current_Pitch/Roll/Thrust values and change signal appropriately
	
 
 *****
 
 */

void jamieOnFrame(leap_hand_ref hand,leap_frame_ref frame){
	//printf("JAMIEonframe");
	leap_vector current_position;
	leap_vector current_direction;
	leap_vector current_velocity;
	leap_vector current_normal; // perpendicular line to direction

	// Gets number of fingers on screen
	int num_fingers = leap_hand_fingers_count(hand); 
	int num_hands = leap_frame_hands_count(frame);
	
	// Gets current position, direction, velocity of hand from Leap
	leap_hand_palm_position(hand, &current_position);
	leap_hand_direction(hand, &current_direction);
	leap_hand_palm_velocity(hand, &current_velocity);
	leap_hand_palm_normal(hand, &current_normal);
	
	/* Print out values. Easier to determine thresholds for gestures.
	printf("\n");
	printf("Position: \n	X: %f \n	Y: %f \n	Z:%f", current_position.x, current_position.y, current_position.z);
	printf("\nDirection: \n	X: %f \n	Y: %f \n	Z:%f", current_direction.x, current_direction.y, current_direction.z);
	printf("\nVelocity: \n	X: %f \n	Y: %f \n	Z:%f", current_velocity.x, current_velocity.y, current_velocity.z);
	printf("\nNormal: \n	X: %f \n	Y: %f \n	Z:%f", current_normal.x, current_normal.y, current_normal.z);
	printf("\nNumber of Fingers: %d", num_fingers);
	*/


	//printf("\ncurrent_signal == %d\n", current_signal);

	//lock
    pthread_mutex_lock(&lockz);


	// Only send new signal if last signal has been processed
	if (current_signal == NO_SIG){
	
	//Pitch
		// Palm is stationary. 
		// looks at Y direction of palm vector (vector from middle of palm to finger)
	if ((current_velocity.x < MINIMUM_VELOCITY_THRESHOLD) && (current_velocity.y < MINIMUM_VELOCITY_THRESHOLD) && (current_velocity.z < MINIMUM_VELOCITY_THRESHOLD)){
		if (current_direction.y < -PITCH_THRESHOLD){ // hand pointed down. increase pitch
			current_pitch = PITCH_CONSTANT;
			//printf("\n-------Decreased pitch  ");
		}else if (current_direction.y > PITCH_THRESHOLD){ // hand pointed up. decrease pitch
			current_pitch = -PITCH_CONSTANT;
			//printf("\n-------Increased pitch  ");
		}
		else {
			current_pitch = 0;
		}
	}
	
	//Roll
		// Palm is stationary. 
		// looks at X direction of palm normal vector (prependicular to vector from middle of palm to finger)
	if ((current_velocity.x < MINIMUM_VELOCITY_THRESHOLD) && (current_velocity.y < MINIMUM_VELOCITY_THRESHOLD) && (current_velocity.z < MINIMUM_VELOCITY_THRESHOLD)){
		if (current_normal.x < -ROLL_THRESHOLD){ // hand pointed left. decrease roll
			current_roll = ROLL_CONSTANT;
			//printf("\n-------Decreased roll  ");
		}else if (current_normal.x > ROLL_THRESHOLD){ // hand pointed right. increase roll
			current_roll = -ROLL_CONSTANT;
			//printf("\n-------Increased roll  ");
		}
		else {
			current_roll = 0;
		}
	}	

	//Thrust
		// Palm is stationary.
		// looks at Y position. 2-3ft above leap = increase thrust. a few inches above leap = decrease thrust
	if ((current_velocity.x < MINIMUM_VELOCITY_THRESHOLD) && (current_velocity.y < MINIMUM_VELOCITY_THRESHOLD) && (current_velocity.z < MINIMUM_VELOCITY_THRESHOLD)){
		if (current_position.y > 400){
			current_thrust = THRUST_CONSTANT;
			current_signal = UPDOWN_SIG;
			printf("\n-------Increased thrust.  UPDOWN_SIG\n");
		}else if(current_position.y < 60){
			current_thrust = -THRUST_CONSTANT;
			current_signal = UPDOWN_SIG;
			printf("\n-------Decreased thrust.	UPDOWN_SIG\n");
		}
		else {
			current_thrust = 0;
		}
	}
	
	
	//FLY_SIG = Two hands. 5 fingers on each (open palm). Stationary hands
		// number of hands == 2. and each hand has 5 fingers
		// hand velocity is less than minimum threshold
	if (num_hands == 2){
			leap_hand_ref hand_0 = leap_frame_hand_at_index(frame, 0); // gets hand objects
			leap_hand_ref hand_1 = leap_frame_hand_at_index(frame, 1);
		if ((leap_hand_fingers_count(hand_0) == 5) && (leap_hand_fingers_count(hand_1) == 5)){
			if ((current_velocity.x < MINIMUM_VELOCITY_THRESHOLD) && (current_velocity.y < MINIMUM_VELOCITY_THRESHOLD) && (current_velocity.z < MINIMUM_VELOCITY_THRESHOLD)){
				
				current_signal = FLY_SIG;
				printf("----------Two hands, 5 fingers each gesture: FLY_SIG\n");
			}	
		}	
	}
	
	//LAND_SIG = Two hands. 0 fingers on each (fist). fists stationary.
		// number of hands == 2. number of fingers == 0
		// hand velocity less than minimum threshold
	if (num_hands == 2){
		leap_hand_ref hand_0 = leap_frame_hand_at_index(frame, 0);
		leap_hand_ref hand_1 = leap_frame_hand_at_index(frame, 1);
		if ((leap_hand_fingers_count(hand_0) == 0) && (leap_hand_fingers_count(hand_1) == 0)){
			if ((current_velocity.x < MINIMUM_VELOCITY_THRESHOLD) && (current_velocity.y < MINIMUM_VELOCITY_THRESHOLD) && (current_velocity.z < MINIMUM_VELOCITY_THRESHOLD)){
				
				current_signal = LAND_SIG;
				printf("----------Two hands, fist gesture: LAND_SIG\n");
			}
		}
	}
	
	// CHANGE_HOVER_SIG = Swipe gesture. From right to left.
		// X velocitiy less than SWIPE_VELOCITY_THRESHOLD
		// Recognizes swipes in both directions: CHANGE_HOVER_SIG
	if ((current_velocity.x < -SWIPE_VELOCITY_THRESHOLD)){
		current_signal = CHANGE_HOVER_SIG;
		printf("----------Swipe gesture: CHANGE_HOVER_SIG\n");
	} 
		
	}

	//unlock
    pthread_mutex_unlock(&lockz);
}





